import 'dart:io';

import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:provider/provider.dart';
import 'package:tattoo_social_app/app/theme/app_colors.dart';
import 'package:tattoo_social_app/data/models/tattoo_model.dart';
import 'package:tattoo_social_app/data/providers/user_provider.dart';
import 'package:tattoo_social_app/services/tatoo_service.dart';

class CreateTattooScreen extends StatefulWidget {
  const CreateTattooScreen({Key? key}) : super(key: key);

  @override
  _CreateTattooScreenState createState() => _CreateTattooScreenState();
}

class _CreateTattooScreenState extends State<CreateTattooScreen> {
  final _formKey = GlobalKey<FormState>();
  final _imageUrlController = TextEditingController();
  final _styleController = TextEditingController();
  final _descriptionController = TextEditingController();
  XFile? _selectedImage;
  final ImagePicker _picker = ImagePicker();

  Future<void> _selectImage() async {
    final XFile? pickedImage =
        await _picker.pickImage(source: ImageSource.gallery);
    if (pickedImage != null) {
      setState(() {
        _selectedImage = pickedImage;
        _imageUrlController.text = pickedImage.path;
      });
    }
  }

  Future<void> _createTattoo() async {
    if (_formKey.currentState!.validate()) {
      final userProvider = Provider.of<UserProvider>(context, listen: false);
      final tattooService = Provider.of<TattooService>(context, listen: false);
      final user = userProvider.currentUser!;

      final tattoo = TattooModel(
        id: '', // Tattoo ID will be generated by Firebase
        userId: user.id!,
        imageUrl: _imageUrlController.text,
        style: _styleController.text,
        description: _descriptionController.text,
        comments: [],
        isReserved: false,
        isAvailable: true,
        likes: [],
      );

      await tattooService.createTattoo(tattoo);
      Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create Tattoo'),
        actions: [
          TextButton(
            onPressed: _createTattoo,
            child: const Text(
              'Create',
              style: TextStyle(color: AppColors.primary),
            ),
          ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              TextFormField(
                controller: _imageUrlController,
                decoration: const InputDecoration(
                  labelText: 'Image URL',
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter an image URL';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: _selectImage,
                child: const Text('Select Image'),
              ),
              const SizedBox(height: 16),
              if (_selectedImage != null)
                Image.file(
                  File(_selectedImage!.path),
                  width: 200,
                  height: 200,
                  fit: BoxFit.cover,
                ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _styleController,
                decoration: const InputDecoration(
                  labelText: 'Style',
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a style';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(
                  labelText: 'Description',
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a description';
                  }
                  return null;
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}
